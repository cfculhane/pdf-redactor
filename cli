#!/Users/okunoe01/workspace/pdf-redactor-fork/venv/bin/python


import re
from datetime import datetime

import pdf_redactor

import click
from pathlib import Path


email_redactor = (
    re.compile(r"[\w.-]+@(?=[a-z\d][^.]*\.)[a-z\d.-]*[^.]"),
    lambda m: "   @      "
)

dob_redactor = (
    re.compile(
        r"(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})"),
    lambda m: "DOB"
)


def names_redactor(name):
    names = name.split()
    r = []
    for n in names:
        char_matcher = [f"[{char.upper()}|{char.lower()}]" for char in n]
        r.append("".join(char_matcher))

    return (re.compile('.'.join(r)), lambda m: '')


def fields_redactor(fields):
    fields_matcher = []
    for f in fields:
        replace_text = "X" * len(f)
        fields_matcher.append((re.compile(f), lambda m: replace_text))
    return fields_matcher


def redact_args(name, fields, in_file):
    # Set options.
    options = pdf_redactor.RedactorOptions()
    options.metadata_filters = {
        # Set some values, overriding any value present in the PDF.
        "Producer": [lambda value: "CV redactor"],
        "CreationDate": [lambda value: datetime.utcnow()],

        # Clear all other fields.
        "DEFAULT": [lambda value: None],
    }

    # Clear any XMP metadata, if present.
    options.xmp_filters = [lambda xml: None]

    options.content_filters = fields_redactor(fields)
    options.content_filters += [email_redactor, dob_redactor]
    # options.content_filters += names_redactor(name)

    print(options.content_filters)
    # Filter the link target URI.
    options.link_filters = [
        lambda href, annotation: "https://www.google.com"
    ]

    options.input_stream = in_file
    options.output_stream = 'out/' + in_file.name

    pdf_redactor.redactor(options)


def check_dir(p):
    target_dir = Path(p)
    if not (target_dir.exists() or target_dir.is_dir()):
        click.echo(
            f"Path {p} is not a valid directory.",
            err=True
        )


#  should take in name of the person
#  should take in the file and output it as the same file with new name
@click.group()
def greet():
    pass


@greet.command()
@click.argument('name', required=True)
@click.argument(
    'text',
    nargs=-1
)
@click.option(
    '--in',
    default='in',
    help="Specify a folder to place your input PDFs"
)
@click.option(
    '--out',
    default='out',
    help="Specify a folder to place your output PDFs"
)
def redact(**kwargs):
    name = kwargs['name'].strip()
    fields = [f.strip() for f in kwargs['text']]

    (check_dir(p) for p in [kwargs['in'], kwargs['out']])

    in_files = Path("in").glob("*.pdf")
    for file in in_files:
        redact_args(name, fields, file)


if __name__ == '__main__':
    greet()
